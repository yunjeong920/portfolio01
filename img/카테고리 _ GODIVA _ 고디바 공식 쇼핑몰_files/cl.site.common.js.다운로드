(function() {
	
	// init window.cl
	rd.createNestedObject(window, 'cl.siteCode');
	rd.createNestedObject(window, 'cl.page');
	
	cl.common = function() {
		this.major = document.forms.frmSearch;
		this.rankingCount = 0;
		
		this.bindClearTextButton();
		this.bindRankingBtn();
		this.bindSearchEvent();
		this.bindLineBannerEvent();
		this.bindFamliyStie();
		this.bindShowCurrentItemList();
		this.bindNewsletterEvent();
		this.bindTextBannerEvent();
		this.bindSearchKeywordLink();
	};

	cl.common.prototype.bindSearchKeywordLink = function() {
		$('.search-autocomplete .autocomplete-item a').on('click', function(e) {
			this.href = encodeURI(decodeURI(this.href));
		});
	};
	
	/**
	 * 텍스트배너 클릭 이벤트
	 */
	cl.common.prototype.bindTextBannerEvent = function() {
		$('.text-banner-list').on('click', function() {
			var url = $(this).data('url');
			var blankYn = $(this).data('target');
			
			if(blankYn === 'Y')
				window.open(url, 'textBanner');
			else
				location.href = url;
		});
	};
	
	/**
	 * 상단 검색어 순위 클릭시
	 */
	cl.common.prototype.bindRankingBtn = function() {
		$('.ranking').off();
		$('.ranking').on('click', function() {
			cl.common.rankingSlide(this);
		});
	};
	
	/**
	 * 뉴스레터신청 버튼 클릭 이벤트
	 */
	cl.common.prototype.bindNewsletterEvent = function() {
		var submitIng = false;
		
		$(document.forms.newsLetterFormMobile).on('submit', function(e) {
			e.preventDefault();
			
			if(submitIng)
				return alert('등록중입니다.');
			
			var regExp = /[0-9a-zA-Z][_0-9a-zA-Z-]*@[_0-9a-zA-Z-]+(\.[_0-9a-zA-Z-]+){1,2}$/;
			
			if($('#newslatter-mail-mobile').val() == '') {
				$('#newslatter-mail-mobile').focus();
				
				return alert('이메일 주소를 입력해주세요.');
			} else if(!$('#newslatter-mail-mobile').val().match(regExp)) {
				$('#newslatter-mail-mobile').focus();
				return alert('이메일형식만 등록 가능합니다.');
			}
			
			submitIng = true;
			
			rd.Ajax.post(this, {
				url: '/newsLetter/create'
			}).done(function() {
				alert('뉴스레터 신청이 완료되었습니다.');
			}).fail(function(e) {
				e.alertError();
			}).always(function() {
				submitIng = false;
			});
			
		});
		
		$(document.forms.newsLetterForm).on('submit', function(e) {
			e.preventDefault();
			
			if(submitIng)
				return alert('등록중입니다.');
			
			var regExp = /[0-9a-zA-Z][_0-9a-zA-Z-]*@[_0-9a-zA-Z-]+(\.[_0-9a-zA-Z-]+){1,2}$/;
			
			if($('#newslatter-mail').val() == '') {
				$('#newslatter-mail').focus();
				
				return alert('이메일 주소를 입력해주세요.');
			} else if(!$('#newslatter-mail').val().match(regExp)) {
				$('#newslatter-mail').focus();
				
				return alert('이메일형식만 등록 가능합니다.');
			}
			
			submitIng = true;
			
			rd.Ajax.post(this, {
				url: '/newsLetter/create'
			}).done(function() {
				alert('뉴스레터 신청이 완료되었습니다.');
			}).fail(function(e) {
				e.alertError();
			}).always(function() {
				submitIng = false;
			});
		});
		
		$('.newsletterSendBtn').on('click', function(e) {
			e.preventDefault();
			
			$('#newslatter-mail').val('');
			
			window.popupBase.layerPopup('#news-letter-join', 'dim', 'fixable');
		});
	};
	
	cl.common.prototype.rankingSlide = function(target) {
		var liList = $(target).parent().parent().find('li');
		var index = $(target).parent().val();
		var positionY = Number($(liList).css('top').split('px')[0]);
		var gap = 25;
		
		if(cl.common.rankingCount != index) {
			if(index > 8) return;
			
			$(liList).css('top', (positionY - gap));
			
			cl.common.rankingCount++;
			
			$(liList).eq(index).find('button').attr('class', 'btn-ud is-btn img_up1 ranking');
			$(liList).eq(index).find('button').html('이전 랭킹');
			$(liList).eq(index + 1).find('button').attr('class', 'btn-ud is-btn img_down1 ranking');
			$(liList).eq(index + 1).find('button').html('다음 랭킹');
		} else {
			if(index < 1) return;
			
			$(liList).css('top', (positionY + gap));
			
			cl.common.rankingCount--;
			
			$(liList).eq(index - 1).find('button').attr('class', 'btn-ud is-btn img_up1 ranking');
			$(liList).eq(index - 1).find('button').html('이전 랭킹');
			$(liList).eq(index).find('button').attr('class', 'btn-ud is-btn img_down1 ranking');
			$(liList).eq(index).find('button').html('다음 랭킹');
		}
		
		cl.common.bindRankingBtn();
	}
	
	/**
	 * 페밀리 사이트 링크
	 */
	cl.common.prototype.bindFamliyStie = function() {
		$('#famliyMoveBtn').on('click', function() {
			if($('#famliySite').val() != '')
				window.open($('#famliySite').val());
		});
	}
	
	/**
	 * 상단, 하단 띠 배너 숨기기 및 세션에 상태 저장
	 */
	cl.common.prototype.bindLineBannerEvent = function() {
		$('.hideBanner').on('click', function(e) {
			e.preventDefault();
			
			$(this).parent().slideUp('fast');
			
			cl.Ajax.get({
				url: '/main/globalBanner/hide',
				data: { bannerName: $(this).parent().attr('id') }
			}).done(function(d) {
				
			}).fail(function(e) {
				//e.alertError();
			});
		});
	}
	
	/**
	 * 상단 헤더 검색
	 */
	cl.common.prototype.bindSearchEvent = function() {		
		$(document.forms.frmSearch).on('submit', function(e) {		
			var form = this;
			
			var inputQuery = $(form.keyword);
			
			var query = inputQuery.val();
			
			if(query.length == 0) { 
				alert('검색어를 입력해주세요.'); 
				return false; 
			} else if(query.length > 100) { 
				alert('검색어의 길이는 100자를 넘을수 없습니다.'); 
				return false;
			}
			return true;
		});
	}
	
	/**
	 * 로그인 하지 않은 경우 로그인 페이지로 이동 
	 * @param target selector
	 * @param returnUrl 
	 */
	cl.common.prototype.bindNeedLogin = function(target, returnUrl) {
		$('body').on('click', target, function() {
			alert('로그인 후 이용 가능합니다.');
			cl.common.goLogin(returnUrl);
		});
	}
	
	/**
	 * 로그인 페이지로 이동
	 * @param returnUrl : 로그인 후 이동 페이지
	 */
	cl.common.prototype.goLogin = function(returnUrl){
		if( returnUrl == undefined ) {
			returnUrl = '';
		}
		location.href = '/member/login?returnUrl=' + returnUrl;
	}
	
	/**
	 * 로그아웃 처리
	 * @param returnUrl : 로그아웃 후 이동 페이지
	 */
	cl.common.prototype.goLogout = function(returnUrl){
		if( returnUrl == undefined ) {
			returnUrl = '';
		}

		// App Logout 이벤트 수행
        cl.App.CrowBridge.onLogout();

		alert("로그아웃되었습니다.");
		location.href = '/login/logout-processing?returnUrl=' + returnUrl;
	}
	
	/**
	 * textarea limit
	 * @param target
	 * @param limit
	 */
	cl.common.prototype.bindContentLengthLimit = function(target, limit) {
		$(target).on('keyup', function() {
			if( $(this).val().length > limit ) {
				$(this).val($(this).val().substr(0, limit));
			}
		});
	}

	
	/**
     * input text X 버튼 bind
     */
	cl.common.prototype.bindClearTextButton = function(){
		
		var clearBtnObj = $('.tf_btn_del');
		clearBtnObj.hide();
		
		$('input[type=text]').on('keyup', function(){
			if($(this).val()){
				$(this).siblings('.tf_btn_del').show();
			} else {
				$(this).siblings('.tf_btn_del').hide();
			}
		});
		
		$('input[type=password]').on('keyup', function(){
			if($(this).val()){
				$(this).siblings('.tf_btn_del').show();
			} else {
				$(this).siblings('.tf_btn_del').hide();
			}
		});
		
		$('.tf_btn_del').on('click', function(e){
			e.preventDefault();
			$(this).siblings('input[type=text]').val('');
			$(this).siblings('input[type=password]').val('');
			$(this).hide();
		});		
	};
	
	/**
	 * 최근 본 제품
	 */
	cl.common.prototype.bindShowCurrentItemList = function() {
		$(".personal_list li").eq(0).mouseenter(
			function(){
				var self = $(this);
				var isLoaded = self.data('is-loaded');
				
				if(isLoaded) {
					return;
				}
				
				self.data('is-loaded', true);
				
				cl.Ajax.get({
					url: '/mypage/wish/recent', 
				}).done(function(d) {
					self.find('em').text(d.result.length);
					$('#recentItemList').empty();
					
					$.each(d.result, function(key, value) {
						d.result[key]['imagePath'] = cl.ItemImage.getUrl(value.item.itemNo, 'item.imageType.thumb') || '';
					});
					
					$('.personal_box').removeClass('loading');
					
					cl.HtmlTemplate.inject(d.result, '#recentItemListTmpl', '#recentItemList');
					cl.common.bindRecentItemDetail();
					
				}).fail(function(e) {
						e.alertError();
				});
			}
		);
	};
	
	/**
	 * 최근 본 제품 상세
	 */
	cl.common.prototype.bindRecentItemDetail = function() {
		$(".recent-item-detail").mouseenter(function(){
			$(this).find(".psl_prodetail").show();
		}).mouseout(function() {
			$(this).find(".psl_prodetail").hide();
		});
	};
	
	/**
	 * 에러메세지 출력
	 * @param target 
	 * @param message
	 */
	cl.common.prototype.printErrorMessage = function(target, message, options) {
		if(!message)
			return;
		
		options = $.extend({
			printType : 'modify'
		}, options);
		
		if(options.printType != 'modify'){
			target.next('span').remove();
			target.after('<span class="message">'+ message +'</span>');
		}else{
			target.parent().next('span').remove();
			target.parent().after('<span class="em normal">'+ message +'</span>');
		}
	}
	
	/**
	 * Form validator
	 * 아이디, 비밀번호 검증
	 */
	var Validator = new function() {
		
		/**
		 * 아이디 검증
		 * 첫글자는 반드시 영문 소문자, 6~15자 영문 소문자, 숫자, 일부특수문(-, _) 허용
		 * 영문 소문자 or 숫자입력, 즉 영문만으로도 가능
		 * 
		 * @param obj 아이디 object
		 */
		this.checkId = function(obj) {
			
			var result = true;
			
			rd.Ajax.get({
				url: '/member/check/valid/id', 
				data: {
					id: obj
				},
				async: false
			}).done(function(d) {
				result = true;
			}).fail(function(e) {
				if( e.responseJSON !== undefined ) {
					alert(e.responseJSON.message)
					$(obj).focus();
				} else {
					e.alertError();
				}
				result = false;
			});
			
			return result;
		}
		
		
		/**
		 * 비밀번호 검증
		 * 영문/숫자 조합 8자이상, 8~32자 영문 대/소문자, 숫자, 특수문자 허용
		 * 
		 * @param obj 비밀번호 object
		*/ 
		this.checkPwd = function(obj, printType) {
			
			var result = true;
			
			if(!$(obj).val()){
    			$(obj).next().remove()
				cl.common.printErrorMessage($(obj), "비밀번호를 입력해주세요.", { printType : printType});
				result = false;
			}
			
			if(result){
				rd.Ajax.get({
					url: '/member/check/valid/pwd', 
					data: {
						pwd: $(obj).val()
					},
					method: 'post',
					async: false
				}).done(function(d) {
					result = true;
					$(obj).next().remove()
					cl.common.printErrorMessage($(obj), "사용 가능한 비밀번호 입니다.", { printType : printType});
				}).fail(function(e) {
					$(obj).next().remove()
					cl.common.printErrorMessage($(obj), "비밀번호를 다시 입력해주세요.", { printType : printType});
					result = false;
				});
			}
			
			return result;
		}
		
		/**
		 * 비밀번호 재입력 검증
		 * 비밀번호와 비밀번호 재입력 값이 일치하는지 체크 
		 * 
		 * @param obj 비밀번호 object
		 * @param objre 비밀번호 재입력 object
		*/ 
		this.checkPwdRe = function(obj, objre, printType) {
			var result = true;
			
			if(!$(objre).val()){
				$(objre).next().remove();
	    		cl.common.printErrorMessage($(objre), '비밀번호 확인을 입력해주세요.', { printType : printType});
    			result = false;
			}
				
	    	// 비밀번호, 재입력 비밀번호 일치여부 체크
	    	if(result) {
	    		if( $(obj).val() != $(objre).val() ){
	    			$(objre).next().remove();
	    			cl.common.printErrorMessage($(objre), '비밀번호가 일치하지 않습니다.', { printType : printType});
	    			result = false;
	    		}else{
		    		$(objre).next().remove();
		    		cl.common.printErrorMessage($(objre), '비밀번호가 일치합니다.', { printType : printType});
	    			result = true;
		    	}
	    	}
	    	
	    	return result;
		}
	}
	
	
	/**
	 * 상호 다른 protocol (http, https) 간의
	 * 접근제어를 위해 프록시 역할을 하는 페이지로 이동시키는 모듈
	 */
	var ProtocolProxy = new function() {
		
		/**
		 * 프로토콜 프록시 수행
		 * @param protocol http or https
		 * @param mode reloadAndClose - 부모창을 reload 하고 셀프창은 닫음
		 */
		this.call = function(protocol, mode) {
			var url = '';
			
			if(protocol == 'http') {
				url = c.root + '/common/protocol-proxy-http?mode=' + mode
			}
			else if(protocol == 'https') {
				url = c.root + '/common/protocol-proxy-https?mode=' + mode
			}
			
			location.href = url;
		};
	};
	
	/**
     * 제품 이미지
     */
    var ItemImage = new function() {

        /**
         * 제품의 이미지 URL 을 리턴
         */
        this.getUrl = function(itemCd, itemImgTypeCdFullPath) {

			var imgTypeCdArr = itemImgTypeCdFullPath.split('.');
			var imgTypeCd = imgTypeCdArr[imgTypeCdArr.length - 1];
        	
            return window.c.attachItemBaseUrl
                + "/" + itemCd
                + "/" + itemCd + "-" + imgTypeCd
                + ".jpg";
        };
    };
	
    /**
     * 이미지 업로드
     */
    var ImageUpload = new function() {

        var self = this;
        var uploadType = 'image';
        var atchGrpId = '';

        this.setUploadType = function(type) {
            uploadType = type;
        };
        
        this.setAtchGrpId = function(id) {
        	atchGrpId = id;
        };

        /**
         * 선택한 파일폼요소를 잠깐 임시로 생성한 form 요소로 감싸 Ajax 로 이미지를 전송
         * @param fileFormElement input[type=file] 요소 선택
         * @param option $.ajax option
         */
        this.ajax = function(fileFormElement, options) {
            fileFormElement = $(fileFormElement);

            var instantForm = $(document.forms.instantUpload);

            if(instantForm.length <= 0) {
                instantForm = $('<form>').attr({
                    'name': 'instantUpload',
                    'action': '/upload/' + uploadType + '?_format=json',
                    'method': 'post',
                    'enctype': 'multipart/form-data'
                });

                $(instantForm).append(
                		$('<input>').attr({
                            'name': 'atchGrpId',
                            'value' : atchGrpId
                        })
                );
                $('body').append(instantForm);
            }

            var sign = fileFormElement.clone();
            fileFormElement.after(sign);
            instantForm.append(fileFormElement.attr('name', 'file'));

            var jqxhr = rd.Ajax.post(document.forms.instantUpload, $.extend({
                success: function(data, status, xhr) {
                    // jquery form plugin 의 버그(?) 로 인해 Deferred.resolve 을 호출할때
                    // parseJSON 이 된 data 가 아닌 responseText 를 전달해주므로
                    // multipart 와 jquery form plugin submit 을 이용하는 경우에만
                    // 값을 대체해준다
                    // jquery.form.js:745 (deferred.resolve...)
                    xhr.responseText = data;
                }
            }, options));

            jqxhr.always(function() {
                fileFormElement.removeAttr('name');
                sign.before(fileFormElement);
                sign.remove();
            });

            return jqxhr;
        };
    };
    
    /**
	 * 회원정보 convert
	 */
	var ConvertMemberInfo = new function() {
		
		this.email = function(options){
			options = $.extend({
				preObjName: 'preEmail',
				domainObjName : 'emailDomain',
				targetObjName : 'email',
				formName : 'major'
			}, options);
			
			var pre = $("input[name="+options.preObjName+"]").val(); 
			var domain = $("input[name="+options.domainObjName+"]").val(); 
			if(pre != ''){
				var target = $("form[name='"+options.formName+"']").find("input[name="+options.targetObjName+"]");
				pre = pre.replace(/(^\s*)|(\s*$)/gi, "");
				
				if(target.length > 0){
					target.val(pre + "@" + domain);
				}else{
					$("input[name="+options.domainObjName+"]").after(
							$('<input>').attr({
								'name': options.targetObjName,
								'type' : 'hidden',
								'value' : pre + "@" + domain
							})
					);
				}
			}
		}
		
		this.telNo = function(options){
			options = $.extend({
				dtlObjName : 'telNoDtl',
				areaObjName : 'telArea',
				targetObjName : 'telNo'
			}, options);
			
			
			var dtlNo = $("input[name="+options.dtlObjName+"]").val().replace(/-/gi, "");
			var telArea = $("select[name="+options.areaObjName+"]").val();
			
			if(dtlNo != ""){
				dtlNo = dtlNo.replace(/([0-9]+)([0-9]{4})/,"$1-$2");
				if(telArea != '')
					dtlNo = telArea + '-' + dtlNo;
			}else{
				dtlNo = ""
			}
			
			if($("input[name="+options.targetObjName+"]").length > 0){
				$("input[name="+options.targetObjName+"]").val(dtlNo);
			}else{
				$("input[name="+options.areaObjName+"]").after(
						$('<input>').attr({
							'name': options.targetObjName,
							'type' : 'hidden',
							'value' : dtlNo
						})
				);
			}
		}
	};
    
    /**
	 * 기간 공통
	 */
	var Period = new function() {
		
		this.init = function(options) {
			options = $.extend({
				initSdate: moment(new Date()),
				initEdate: moment(new Date()),
				dateTime : 'TD',
				startDateObjId: 'REG_SDATE',
				endDateObjId: 'REG_EDATE',
			}, options);
			
			this.setView(options);
		};
		
		/**
		 * 기간 select 출력
		 * 
		 * @param options : init 옵션. Period.init() 함수 옵션과 동일
		 */
		this.setView = function(options) {
			
			var startDate = options.initSdate;
			var endDate = options.initEdate;
			
			
			switch(options.dateTime){
				case '2W' : 
					startDate = moment(new Date()).add(-2, 'weeks');
					endDate = moment(new Date());
					
					break;
				case '1D' : 
					startDate = moment(new Date()).add(-1, 'month');
					endDate = moment(new Date());
					
					break;
				case '3D' : 
					startDate = moment(new Date()).add(-3, 'month');
					endDate = moment(new Date());
					
					break;
				
				case '6D' : 
					startDate = moment(new Date()).add(-6, 'month');
					endDate = moment(new Date());
					
					break;
					
				case '1Y' : 
					startDate = moment(new Date()).add(-1, 'year');
					endDate = moment(new Date());
					
					break;
					
				default : 
					break;
			}
			
			startDate = startDate.format("YYYY-MM-DD");
			endDate = endDate.format("YYYY-MM-DD");
			$('#'+options.startDateObjId).val(startDate);
			$('#'+options.endDateObjId).val(endDate);
			
		}
	};
	
	 /**
	 * code bit 공통
	 */
	var CodeBit = new function() {
		/**
		 * 기간 select 출력
		 * 
		 * @param options : init 옵션. Period.init() 함수 옵션과 동일
		 */
		this.setLabel = function(options) {
			options = $.extend({
				codeList : '',
				codeValue : '',
				getCdEntity : 'cdAdd2Val',
				cdBitEntity : 'cdAdd1Val',
				connect : '/'
			}, options);
			
			var cdLabel = "";
			$.each(options.codeList, function(k, v) {
				if((options.codeValue & v[options.cdBitEntity]) == v[options.cdBitEntity])
					cdLabel += v[options.getCdEntity]+ options.connect;
			});
			
			return cdLabel.slice(0,-1);
		}
	};

	/**
	 * CART 등록
	 */
	var Cart = new function() {
		this.setting = function(options){
			options = $.extend({
				'callback' : '',
				'data' : ''
			}, options);
			
			if(options.data.itemCdList == null || options.data.itemCdList.length == 0){
				alert('제품코드정보가 없습니다.');
				return;
			}
			
            var itemCdList = options.data.itemCdList;
            var qty = !options.data.qty ? 1 : options.data.qty; // 제품수량
            var immeOrdYn = !options.data.immeOrdYn ? 'N' : options.data.immeOrdYn; // 즉시구매여부
            var acode = !options.data.acode ? '' : options.data.acode; // 영역코드
            
            // 와이즈로그
            var itemCode = itemCdList;
            rd.Ajax.post(null, {
                'url' : '/cart/create?itemCode=' + itemCode + '&acode=' + acode,
                'traditional' : true,
                'data' : {
                    'itemCdList' : itemCdList,
                    'qty' : qty,
                    'immeOrdYn' : immeOrdYn
                }
            }).done(function (d) {
                if(d.immeOrdYn == 'N'){
                    // CART 담기
                    if(confirm('CART에 제품을 담았습니다.\nCART로 이동하시겠습니까?')){
                        location.href = '/cart';
                    }
                }else{
                    // 즉시구매 이동
                    location.href = '/order/order-step1';
                }

                /* EDN CART script start 
                var adbay = new adbayCartClass(window.ads.EdnShopId);
                var qty = d.qty;
                $.each(d.cartExtList, function(i,v) {
                	// 상품코드 : v.item.itemCd, 수량 : v.qty, 가격 : v.item.itemPrice.sellPrc
                	adbay.setGoods(v.item.itemCd,qty,v.item.itemPrice.sellPrc);	
                	adbay.setMethod('add'); //CART에 상품이 추가 될 경우
                });
                adbay.send();
                */
                /* EDN CART script end */
                
                
                
            }).fail(function (e) {
            	if(e.data.exception.alertType == 'CONFIRM'){
            		if(confirm(e.data.exception.localizedMessage)){
            			location.href = '/member/login?returnUrl=' + e.data.exception.confirmUrl;
            		}
            	}else{
            		e.alertError();	
            	}
            }).always(function (d) {
            });
		}
	}
	
	/**
	 * 위시 등록
	 */
	var Wish = new function() {
		this.setting = function(options){
			options = $.extend({
				'callback' : '',
				'target' : '',
				'mode' : '',
				'data' : {
					'itemCdList' : '',
					'acode' : ''
				}
			}, options);
			
			if(options.callback && !$.isFunction(options.callback)){
				return;
			}
			
			if(options.data.itemCdList == null || options.data.itemCdList.length == 0){
				alert('제품코드정보가 없습니다.');
				return;
			}

			var itemCdList = options.data.itemCdList;

			// 와이즈 로그
			var itemCode = itemCdList;
			// 영역코드
			var acode = !options.data.acode ? '' : options.data.acode; // 영역코드
			
            var url = '';
            if(options.mode){
            	if(options.mode == 'create'){
            		url = '/mypage/wish/create?itemCode=' + itemCode + '&acode=' + acode;
            	}
            	else if(options.mode == 'remove'){
            		url = '/mypage/wish/remove?itemCode=' + itemCode + '&acode=' + acode;
            	}
            }else{
                if(options.target.hasClass('on')){
                	url = '/mypage/wish/remove?itemCode=' + itemCode + '&acode=' + acode;
                }else{
                	url = '/mypage/wish/create?itemCode=' + itemCode + '&acode=' + acode;
                }            	
            }

            rd.Ajax.post(null, {
                'url' : url,
                'traditional' : true,
                'data' : {
                    'itemCdList' : itemCdList
                }
            }).done(function (d) {
                if($(options.target).hasClass('on')){
                	$(options.target).removeClass('on');
                }else{
                	$(options.target).addClass('on');
                }
                
                if(options.callback && $.isFunction(options.callback)){
                    // 콜백
                    options.callback(options.target);                	
                }

            }).fail(function (e) {
            	if(e.data.exception != undefined && e.data.exception.alertType == 'CONFIRM'){
            		if(confirm(e.data.exception.localizedMessage)){
            			location.href = '/member/login?returnUrl=' + e.data.exception.confirmUrl;
            		}
            	}else{
            		e.alertError();	
            	}
            }).always(function (d) {
            });
		}
	}
	
	$(function() {
		// 사이트 공통 실행 부분
		cl.common = new cl.common();
		cl.Validator = Validator;
		cl.ProtocolProxy = ProtocolProxy;
		cl.ItemImage = ItemImage;
		cl.ImageUpload = ImageUpload;
		cl.Period = Period;
		cl.ConvertMemberInfo = ConvertMemberInfo;
		cl.CodeBit = CodeBit;
		
		cl.Cart = Cart;
		cl.Wish = Wish;

		// CrowBridge 이벤트 바인딩
		cl.App.bindCrowBridgeEvents();
	});
	
	return cl;
})();

